{"ast":null,"code":"import { disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295 } from \"./textSelection.mjs\";\nimport { PressResponderContext as $ae1eeba8b9eafd08$export$5165eccb35aaadb5 } from \"./context.mjs\";\nimport { _ as $7mdmh$_ } from \"@swc/helpers/_/_class_private_field_get\";\nimport { _ as $7mdmh$_1 } from \"@swc/helpers/_/_class_private_field_init\";\nimport { _ as $7mdmh$_2 } from \"@swc/helpers/_/_class_private_field_set\";\nimport { mergeProps as $7mdmh$mergeProps, useSyncRef as $7mdmh$useSyncRef, useGlobalListeners as $7mdmh$useGlobalListeners, useEffectEvent as $7mdmh$useEffectEvent, getOwnerDocument as $7mdmh$getOwnerDocument, chain as $7mdmh$chain, isMac as $7mdmh$isMac, openLink as $7mdmh$openLink, isVirtualClick as $7mdmh$isVirtualClick, focusWithoutScrolling as $7mdmh$focusWithoutScrolling, isVirtualPointerEvent as $7mdmh$isVirtualPointerEvent, getOwnerWindow as $7mdmh$getOwnerWindow } from \"@react-aria/utils\";\nimport { useContext as $7mdmh$useContext, useState as $7mdmh$useState, useRef as $7mdmh$useRef, useMemo as $7mdmh$useMemo, useEffect as $7mdmh$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = (0, $7mdmh$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = (0, $7mdmh$mergeProps)(contextProps, props);\n    register();\n  }\n  (0, $7mdmh$useSyncRef)(context, props.ref);\n  return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n  continuePropagation() {\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n  }\n  get shouldStopPropagation() {\n    return (0, $7mdmh$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n  }\n  constructor(type, pointerType, originalEvent) {\n    (0, $7mdmh$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n      writable: true,\n      value: void 0\n    });\n    (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n    this.type = type;\n    this.pointerType = pointerType;\n    this.target = originalEvent.currentTarget;\n    this.shiftKey = originalEvent.shiftKey;\n    this.metaKey = originalEvent.metaKey;\n    this.ctrlKey = originalEvent.ctrlKey;\n    this.altKey = originalEvent.altKey;\n  }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol(\"linkClicked\");\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let [isPressed, setPressed] = (0, $7mdmh$useState)(false);\n  let ref = (0, $7mdmh$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    isTriggeringEvent: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $7mdmh$useGlobalListeners)();\n  let triggerPressStart = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled || state.didFirePressStart) return false;\n    let shouldStopPropagation = true;\n    state.isTriggeringEvent = true;\n    if (onPressStart) {\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"pressstart\", pointerType, originalEvent);\n      onPressStart(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(true);\n    state.isTriggeringEvent = false;\n    state.didFirePressStart = true;\n    setPressed(true);\n    return shouldStopPropagation;\n  });\n  let triggerPressEnd = (0, $7mdmh$useEffectEvent)(function (originalEvent, pointerType) {\n    let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let state = ref.current;\n    if (!state.didFirePressStart) return false;\n    state.ignoreClickAfterPress = true;\n    state.didFirePressStart = false;\n    state.isTriggeringEvent = true;\n    let shouldStopPropagation = true;\n    if (onPressEnd) {\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"pressend\", pointerType, originalEvent);\n      onPressEnd(event);\n      shouldStopPropagation = event.shouldStopPropagation;\n    }\n    if (onPressChange) onPressChange(false);\n    setPressed(false);\n    if (onPress && wasPressed && !isDisabled) {\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"press\", pointerType, originalEvent);\n      onPress(event);\n      shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n    }\n    state.isTriggeringEvent = false;\n    return shouldStopPropagation;\n  });\n  let triggerPressUp = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType) => {\n    let state = ref.current;\n    if (isDisabled) return false;\n    if (onPressUp) {\n      state.isTriggeringEvent = true;\n      let event = new $f6c31cce2adf654f$var$PressEvent(\"pressup\", pointerType, originalEvent);\n      onPressUp(event);\n      state.isTriggeringEvent = false;\n      return event.shouldStopPropagation;\n    }\n    return true;\n  });\n  let cancel = (0, $7mdmh$useEffectEvent)(e => {\n    let state = ref.current;\n    if (state.isPressed && state.target) {\n      if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n      state.isPressed = false;\n      state.isOverTarget = false;\n      state.activePointerId = null;\n      state.pointerType = null;\n      removeAllGlobalListeners();\n      if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n    }\n  });\n  let cancelOnPointerExit = (0, $7mdmh$useEffectEvent)(e => {\n    if (shouldCancelOnPointerExit) cancel(e);\n  });\n  let pressProps = (0, $7mdmh$useMemo)(() => {\n    let state = ref.current;\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          var _state_metaKeyEvents;\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          let shouldStopPropagation = true;\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            shouldStopPropagation = triggerPressStart(e, \"keyboard\");\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n            let originalTarget = e.currentTarget;\n            let pressUp = e => {\n              if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n            };\n            addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"keyup\", (0, $7mdmh$chain)(pressUp, onKeyUp), true);\n          }\n          if (shouldStopPropagation) e.stopPropagation();\n          // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n          // macOS has a bug where keyup events are not fired while the Meta key is down.\n          // When the Meta key itself is released we will get an event for that, and we'll act as if\n          // all of these other keys were released as well.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n          // https://bugs.webkit.org/show_bug.cgi?id=55291\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n          if (e.metaKey && (0, $7mdmh$isMac)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);\n        } else if (e.key === \"Meta\") state.metaKeyEvents = new Map();\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n        if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $7mdmh$openLink).isOpening) {\n          let shouldStopPropagation = true;\n          if (isDisabled) e.preventDefault();\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === \"virtual\" || (0, $7mdmh$isVirtualClick)(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n            let stopPressStart = triggerPressStart(e, \"virtual\");\n            let stopPressUp = triggerPressUp(e, \"virtual\");\n            let stopPressEnd = triggerPressEnd(e, \"virtual\");\n            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n          }\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n          if (shouldStopPropagation) e.stopPropagation();\n        }\n      }\n    };\n    let onKeyUp = e => {\n      var _state_metaKeyEvents;\n      if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        var _state_metaKeyEvents1;\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n        removeAllGlobalListeners();\n        // If a link was triggered with a key other than Enter, open the URL ourselves.\n        // This means the link has a role override, and the default browser behavior\n        // only applies when using the Enter key.\n        if (e.key !== \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n          // Store a hidden property on the event so we only trigger link click once,\n          // even if there are multiple usePress instances attached to the element.\n          e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n          (0, $7mdmh$openLink)(state.target, e, false);\n        }\n        state.isPressed = false;\n        (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n      } else if (e.key === \"Meta\" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n        var _state_target;\n        // If we recorded keydown events that occurred while the Meta key was pressed,\n        // and those haven't received keyup events already, fire keyup events ourselves.\n        // See comment above for more info about the macOS bug causing this.\n        let events = state.metaKeyEvents;\n        state.metaKeyEvents = undefined;\n        for (let event of events.values()) (_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent(\"keyup\", event));\n      }\n    };\n    if (typeof PointerEvent !== \"undefined\") {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if ((0, $7mdmh$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = \"virtual\";\n          return;\n        }\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        let shouldStopPropagation = true;\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"pointermove\", onPointerMove, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"pointerup\", onPointerUp, false);\n          addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"pointercancel\", onPointerCancel, false);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return;\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      };\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.target && state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n      };\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n      };\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        if (state.ignoreEmulatedMouseEvents) {\n          e.stopPropagation();\n          return;\n        }\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $7mdmh$isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"mouseup\", onMouseUp, false);\n      };\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = true;\n          shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let shouldStopPropagation = true;\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || \"mouse\");\n      };\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n        if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = \"touch\";\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n        if (shouldStopPropagation) e.stopPropagation();\n        addGlobalListener((0, $7mdmh$getOwnerWindow)(e.currentTarget), \"scroll\", onScroll, true);\n      };\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget && state.pointerType != null) {\n            state.isOverTarget = true;\n            shouldStopPropagation = triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget && state.pointerType != null) {\n          state.isOverTarget = false;\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n          cancelOnPointerExit(e);\n        }\n        if (shouldStopPropagation) e.stopPropagation();\n      };\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.isPressed) {\n          e.stopPropagation();\n          return;\n        }\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n        let shouldStopPropagation = true;\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n          triggerPressUp(e, state.pointerType);\n          shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n        if (shouldStopPropagation) e.stopPropagation();\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress, cancel, cancelOnPointerExit, triggerPressEnd, triggerPressStart, triggerPressUp]);\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  (0, $7mdmh$useEffect)(() => {\n    return () => {\n      var _ref_current_target;\n      if (!allowTextSelectionOnPress)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $7mdmh$mergeProps)(domProps, pressProps)\n  };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute(\"role\");\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLTextAreaElement || element.isContentEditable) &&\n  // Links should only trigger with Enter key\n  !((role === \"link\" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== \"Enter\");\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n  return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = 0;\n  let offsetY = 0;\n  if (point.width !== undefined) offsetX = point.width / 2;else if (point.radiusX !== undefined) offsetX = point.radiusX;\n  if (point.height !== undefined) offsetY = point.height / 2;else if (point.radiusY !== undefined) offsetY = point.radiusY;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false;\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.hasAttribute(\"draggable\");\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== \"submit\" && target.type !== \"reset\";\n  if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n  return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\"checkbox\", \"radio\", \"range\", \"color\", \"file\", \"image\", \"button\", \"submit\", \"reset\"]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\nexport { $f6c31cce2adf654f$export$45712eceda6fad21 as usePress };","map":{"version":3,"names":["disableTextSelection","$14c0b72509d70225$export$16a4697467175487","restoreTextSelection","$14c0b72509d70225$export$b0d6fa1ab32e3295","PressResponderContext","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","_","$7mdmh$_","$7mdmh$_1","$7mdmh$_2","mergeProps","$7mdmh$mergeProps","useSyncRef","$7mdmh$useSyncRef","useGlobalListeners","$7mdmh$useGlobalListeners","useEffectEvent","$7mdmh$useEffectEvent","getOwnerDocument","$7mdmh$getOwnerDocument","chain","$7mdmh$chain","isMac","$7mdmh$isMac","openLink","$7mdmh$openLink","isVirtualClick","$7mdmh$isVirtualClick","focusWithoutScrolling","$7mdmh$focusWithoutScrolling","isVirtualPointerEvent","$7mdmh$isVirtualPointerEvent","getOwnerWindow","$7mdmh$getOwnerWindow","useContext","$7mdmh$useContext","useState","$7mdmh$useState","useRef","$7mdmh$useRef","useMemo","$7mdmh$useMemo","useEffect","$7mdmh$useEffect","$f6c31cce2adf654f$var$usePressResponderContext","props","context","register","contextProps","ref","$f6c31cce2adf654f$var$_shouldStopPropagation","WeakMap","$f6c31cce2adf654f$var$PressEvent","continuePropagation","shouldStopPropagation","constructor","type","pointerType","originalEvent","writable","value","target","currentTarget","shiftKey","metaKey","ctrlKey","altKey","$f6c31cce2adf654f$var$LINK_CLICKED","Symbol","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","domProps","setPressed","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","isTriggeringEvent","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","triggerPressStart","state","current","event","triggerPressEnd","wasPressed","arguments","length","undefined","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","cancelOnPointerExit","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","_state_metaKeyEvents","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","repeat","originalTarget","pressUp","onKeyUp","stopPropagation","metaKeyEvents","set","Map","onClick","button","isOpening","stopPressStart","stopPressUp","stopPressEnd","_state_metaKeyEvents1","$f6c31cce2adf654f$var$isHTMLAnchorLink","delete","size","_state_target","events","values","dispatchEvent","KeyboardEvent","PointerEvent","onPointerDown","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","_ref_current_target","tagName","hasAttribute","code","element","role","getAttribute","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","offsetY","width","radiusX","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","HTMLElement","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","has","usePress"],"sources":["/Users/peggyduggan/Development/offRecord/Project5-Project-cft/node_modules/@react-aria/interactions/dist/usePress.mjs"],"sourcesContent":["import {disableTextSelection as $14c0b72509d70225$export$16a4697467175487, restoreTextSelection as $14c0b72509d70225$export$b0d6fa1ab32e3295} from \"./textSelection.mjs\";\nimport {PressResponderContext as $ae1eeba8b9eafd08$export$5165eccb35aaadb5} from \"./context.mjs\";\nimport {_ as $7mdmh$_} from \"@swc/helpers/_/_class_private_field_get\";\nimport {_ as $7mdmh$_1} from \"@swc/helpers/_/_class_private_field_init\";\nimport {_ as $7mdmh$_2} from \"@swc/helpers/_/_class_private_field_set\";\nimport {mergeProps as $7mdmh$mergeProps, useSyncRef as $7mdmh$useSyncRef, useGlobalListeners as $7mdmh$useGlobalListeners, useEffectEvent as $7mdmh$useEffectEvent, getOwnerDocument as $7mdmh$getOwnerDocument, chain as $7mdmh$chain, isMac as $7mdmh$isMac, openLink as $7mdmh$openLink, isVirtualClick as $7mdmh$isVirtualClick, focusWithoutScrolling as $7mdmh$focusWithoutScrolling, isVirtualPointerEvent as $7mdmh$isVirtualPointerEvent, getOwnerWindow as $7mdmh$getOwnerWindow} from \"@react-aria/utils\";\nimport {useContext as $7mdmh$useContext, useState as $7mdmh$useState, useRef as $7mdmh$useRef, useMemo as $7mdmh$useMemo, useEffect as $7mdmh$useEffect} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n\n\n\n\n\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n    // Consume context from <PressResponder> and merge with props.\n    let context = (0, $7mdmh$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n    if (context) {\n        let { register: register, ...contextProps } = context;\n        props = (0, $7mdmh$mergeProps)(contextProps, props);\n        register();\n    }\n    (0, $7mdmh$useSyncRef)(context, props.ref);\n    return props;\n}\nvar $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/ new WeakMap();\nclass $f6c31cce2adf654f$var$PressEvent {\n    continuePropagation() {\n        (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);\n    }\n    get shouldStopPropagation() {\n        return (0, $7mdmh$_)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);\n    }\n    constructor(type, pointerType, originalEvent){\n        (0, $7mdmh$_1)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {\n            writable: true,\n            value: void 0\n        });\n        (0, $7mdmh$_2)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);\n        this.type = type;\n        this.pointerType = pointerType;\n        this.target = originalEvent.currentTarget;\n        this.shiftKey = originalEvent.shiftKey;\n        this.metaKey = originalEvent.metaKey;\n        this.ctrlKey = originalEvent.ctrlKey;\n        this.altKey = originalEvent.altKey;\n    }\n}\nconst $f6c31cce2adf654f$var$LINK_CLICKED = Symbol(\"linkClicked\");\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n    let { onPress: onPress, onPressChange: onPressChange, onPressStart: onPressStart, onPressEnd: onPressEnd, onPressUp: onPressUp, isDisabled: isDisabled, isPressed: isPressedProp, preventFocusOnPress: preventFocusOnPress, shouldCancelOnPointerExit: shouldCancelOnPointerExit, allowTextSelectionOnPress: allowTextSelectionOnPress, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n    let [isPressed, setPressed] = (0, $7mdmh$useState)(false);\n    let ref = (0, $7mdmh$useRef)({\n        isPressed: false,\n        ignoreEmulatedMouseEvents: false,\n        ignoreClickAfterPress: false,\n        didFirePressStart: false,\n        isTriggeringEvent: false,\n        activePointerId: null,\n        target: null,\n        isOverTarget: false,\n        pointerType: null\n    });\n    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = (0, $7mdmh$useGlobalListeners)();\n    let triggerPressStart = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType)=>{\n        let state = ref.current;\n        if (isDisabled || state.didFirePressStart) return false;\n        let shouldStopPropagation = true;\n        state.isTriggeringEvent = true;\n        if (onPressStart) {\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"pressstart\", pointerType, originalEvent);\n            onPressStart(event);\n            shouldStopPropagation = event.shouldStopPropagation;\n        }\n        if (onPressChange) onPressChange(true);\n        state.isTriggeringEvent = false;\n        state.didFirePressStart = true;\n        setPressed(true);\n        return shouldStopPropagation;\n    });\n    let triggerPressEnd = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType, wasPressed = true)=>{\n        let state = ref.current;\n        if (!state.didFirePressStart) return false;\n        state.ignoreClickAfterPress = true;\n        state.didFirePressStart = false;\n        state.isTriggeringEvent = true;\n        let shouldStopPropagation = true;\n        if (onPressEnd) {\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"pressend\", pointerType, originalEvent);\n            onPressEnd(event);\n            shouldStopPropagation = event.shouldStopPropagation;\n        }\n        if (onPressChange) onPressChange(false);\n        setPressed(false);\n        if (onPress && wasPressed && !isDisabled) {\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"press\", pointerType, originalEvent);\n            onPress(event);\n            shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);\n        }\n        state.isTriggeringEvent = false;\n        return shouldStopPropagation;\n    });\n    let triggerPressUp = (0, $7mdmh$useEffectEvent)((originalEvent, pointerType)=>{\n        let state = ref.current;\n        if (isDisabled) return false;\n        if (onPressUp) {\n            state.isTriggeringEvent = true;\n            let event = new $f6c31cce2adf654f$var$PressEvent(\"pressup\", pointerType, originalEvent);\n            onPressUp(event);\n            state.isTriggeringEvent = false;\n            return event.shouldStopPropagation;\n        }\n        return true;\n    });\n    let cancel = (0, $7mdmh$useEffectEvent)((e)=>{\n        let state = ref.current;\n        if (state.isPressed && state.target) {\n            if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n            state.isPressed = false;\n            state.isOverTarget = false;\n            state.activePointerId = null;\n            state.pointerType = null;\n            removeAllGlobalListeners();\n            if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n    });\n    let cancelOnPointerExit = (0, $7mdmh$useEffectEvent)((e)=>{\n        if (shouldCancelOnPointerExit) cancel(e);\n    });\n    let pressProps = (0, $7mdmh$useMemo)(()=>{\n        let state = ref.current;\n        let pressProps = {\n            onKeyDown (e) {\n                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n                    var _state_metaKeyEvents;\n                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n                    // If the event is repeating, it may have started on a different element\n                    // after which focus moved to the current element. Ignore these events and\n                    // only handle the first key down event.\n                    let shouldStopPropagation = true;\n                    if (!state.isPressed && !e.repeat) {\n                        state.target = e.currentTarget;\n                        state.isPressed = true;\n                        shouldStopPropagation = triggerPressStart(e, \"keyboard\");\n                        // Focus may move before the key up event, so register the event on the document\n                        // instead of the same element where the key down event occurred. Make it capturing so that it will trigger\n                        // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.\n                        let originalTarget = e.currentTarget;\n                        let pressUp = (e)=>{\n                            if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n                        };\n                        addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"keyup\", (0, $7mdmh$chain)(pressUp, onKeyUp), true);\n                    }\n                    if (shouldStopPropagation) e.stopPropagation();\n                    // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.\n                    // macOS has a bug where keyup events are not fired while the Meta key is down.\n                    // When the Meta key itself is released we will get an event for that, and we'll act as if\n                    // all of these other keys were released as well.\n                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524\n                    // https://bugs.webkit.org/show_bug.cgi?id=55291\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553\n                    if (e.metaKey && (0, $7mdmh$isMac)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);\n                } else if (e.key === \"Meta\") state.metaKeyEvents = new Map();\n            },\n            onClick (e) {\n                if (e && !e.currentTarget.contains(e.target)) return;\n                if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $7mdmh$openLink).isOpening) {\n                    let shouldStopPropagation = true;\n                    if (isDisabled) e.preventDefault();\n                    // If triggered from a screen reader or by using element.click(),\n                    // trigger as if it were a keyboard click.\n                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === \"virtual\" || (0, $7mdmh$isVirtualClick)(e.nativeEvent))) {\n                        // Ensure the element receives focus (VoiceOver on iOS does not do this)\n                        if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n                        let stopPressStart = triggerPressStart(e, \"virtual\");\n                        let stopPressUp = triggerPressUp(e, \"virtual\");\n                        let stopPressEnd = triggerPressEnd(e, \"virtual\");\n                        shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;\n                    }\n                    state.ignoreEmulatedMouseEvents = false;\n                    state.ignoreClickAfterPress = false;\n                    if (shouldStopPropagation) e.stopPropagation();\n                }\n            }\n        };\n        let onKeyUp = (e)=>{\n            var _state_metaKeyEvents;\n            if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n                var _state_metaKeyEvents1;\n                if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n                let target = e.target;\n                triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n                removeAllGlobalListeners();\n                // If a link was triggered with a key other than Enter, open the URL ourselves.\n                // This means the link has a role override, and the default browser behavior\n                // only applies when using the Enter key.\n                if (e.key !== \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {\n                    // Store a hidden property on the event so we only trigger link click once,\n                    // even if there are multiple usePress instances attached to the element.\n                    e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;\n                    (0, $7mdmh$openLink)(state.target, e, false);\n                }\n                state.isPressed = false;\n                (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);\n            } else if (e.key === \"Meta\" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {\n                var _state_target;\n                // If we recorded keydown events that occurred while the Meta key was pressed,\n                // and those haven't received keyup events already, fire keyup events ourselves.\n                // See comment above for more info about the macOS bug causing this.\n                let events = state.metaKeyEvents;\n                state.metaKeyEvents = undefined;\n                for (let event of events.values())(_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent(\"keyup\", event));\n            }\n        };\n        if (typeof PointerEvent !== \"undefined\") {\n            pressProps.onPointerDown = (e)=>{\n                // Only handle left clicks, and ignore events that bubbled through portals.\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n                // Ignore and let the onClick handler take care of it instead.\n                // https://bugs.webkit.org/show_bug.cgi?id=222627\n                // https://bugs.webkit.org/show_bug.cgi?id=223202\n                if ((0, $7mdmh$isVirtualPointerEvent)(e.nativeEvent)) {\n                    state.pointerType = \"virtual\";\n                    return;\n                }\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on pointer down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                state.pointerType = e.pointerType;\n                let shouldStopPropagation = true;\n                if (!state.isPressed) {\n                    state.isPressed = true;\n                    state.isOverTarget = true;\n                    state.activePointerId = e.pointerId;\n                    state.target = e.currentTarget;\n                    if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n                    if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n                    shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                    addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"pointermove\", onPointerMove, false);\n                    addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"pointerup\", onPointerUp, false);\n                    addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"pointercancel\", onPointerCancel, false);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onMouseDown = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (e.button === 0) {\n                    // Chrome and Firefox on touch Windows devices require mouse down events\n                    // to be canceled in addition to pointer events, or an extra asynchronous\n                    // focus event will be fired.\n                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                    e.stopPropagation();\n                }\n            };\n            pressProps.onPointerUp = (e)=>{\n                // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n                if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return;\n                // Only handle left clicks\n                // Safari on iOS sometimes fires pointerup events, even\n                // when the touch isn't over the target, so double check.\n                if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n            };\n            // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n            // Use pointer move events instead to implement our own hit testing.\n            // See https://bugs.webkit.org/show_bug.cgi?id=199803\n            let onPointerMove = (e)=>{\n                if (e.pointerId !== state.activePointerId) return;\n                if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n                    if (!state.isOverTarget && state.pointerType != null) {\n                        state.isOverTarget = true;\n                        triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    }\n                } else if (state.target && state.isOverTarget && state.pointerType != null) {\n                    state.isOverTarget = false;\n                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    cancelOnPointerExit(e);\n                }\n            };\n            let onPointerUp = (e)=>{\n                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {\n                    if ($f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                    else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                    state.isPressed = false;\n                    state.isOverTarget = false;\n                    state.activePointerId = null;\n                    state.pointerType = null;\n                    removeAllGlobalListeners();\n                    if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n                }\n            };\n            let onPointerCancel = (e)=>{\n                cancel(e);\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n                cancel(e);\n            };\n        } else {\n            pressProps.onMouseDown = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent\n                // default on mouse down and handle focusing the pressable element ourselves.\n                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n                if (state.ignoreEmulatedMouseEvents) {\n                    e.stopPropagation();\n                    return;\n                }\n                state.isPressed = true;\n                state.isOverTarget = true;\n                state.target = e.currentTarget;\n                state.pointerType = (0, $7mdmh$isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n                if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n                let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                if (shouldStopPropagation) e.stopPropagation();\n                addGlobalListener((0, $7mdmh$getOwnerDocument)(e.currentTarget), \"mouseup\", onMouseUp, false);\n            };\n            pressProps.onMouseEnter = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                let shouldStopPropagation = true;\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n                    state.isOverTarget = true;\n                    shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onMouseLeave = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                let shouldStopPropagation = true;\n                if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {\n                    state.isOverTarget = false;\n                    shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n                    cancelOnPointerExit(e);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onMouseUp = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || \"mouse\");\n            };\n            let onMouseUp = (e)=>{\n                // Only handle left clicks\n                if (e.button !== 0) return;\n                state.isPressed = false;\n                removeAllGlobalListeners();\n                if (state.ignoreEmulatedMouseEvents) {\n                    state.ignoreEmulatedMouseEvents = false;\n                    return;\n                }\n                if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n                else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n                state.isOverTarget = false;\n            };\n            pressProps.onTouchStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n                if (!touch) return;\n                state.activePointerId = touch.identifier;\n                state.ignoreEmulatedMouseEvents = true;\n                state.isOverTarget = true;\n                state.isPressed = true;\n                state.target = e.currentTarget;\n                state.pointerType = \"touch\";\n                // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n                // on the emulated mouse event and handle focusing the pressable element ourselves.\n                if (!isDisabled && !preventFocusOnPress) (0, $7mdmh$focusWithoutScrolling)(e.currentTarget);\n                if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n                let shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                if (shouldStopPropagation) e.stopPropagation();\n                addGlobalListener((0, $7mdmh$getOwnerWindow)(e.currentTarget), \"scroll\", onScroll, true);\n            };\n            pressProps.onTouchMove = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.isPressed) {\n                    e.stopPropagation();\n                    return;\n                }\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                let shouldStopPropagation = true;\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n                    if (!state.isOverTarget && state.pointerType != null) {\n                        state.isOverTarget = true;\n                        shouldStopPropagation = triggerPressStart(e, state.pointerType);\n                    }\n                } else if (state.isOverTarget && state.pointerType != null) {\n                    state.isOverTarget = false;\n                    shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n                    cancelOnPointerExit(e);\n                }\n                if (shouldStopPropagation) e.stopPropagation();\n            };\n            pressProps.onTouchEnd = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                if (!state.isPressed) {\n                    e.stopPropagation();\n                    return;\n                }\n                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n                let shouldStopPropagation = true;\n                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {\n                    triggerPressUp(e, state.pointerType);\n                    shouldStopPropagation = triggerPressEnd(e, state.pointerType);\n                } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);\n                if (shouldStopPropagation) e.stopPropagation();\n                state.isPressed = false;\n                state.activePointerId = null;\n                state.isOverTarget = false;\n                state.ignoreEmulatedMouseEvents = true;\n                if (state.target && !allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n                removeAllGlobalListeners();\n            };\n            pressProps.onTouchCancel = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                e.stopPropagation();\n                if (state.isPressed) cancel(e);\n            };\n            let onScroll = (e)=>{\n                if (state.isPressed && e.target.contains(state.target)) cancel({\n                    currentTarget: state.target,\n                    shiftKey: false,\n                    ctrlKey: false,\n                    metaKey: false,\n                    altKey: false\n                });\n            };\n            pressProps.onDragStart = (e)=>{\n                if (!e.currentTarget.contains(e.target)) return;\n                cancel(e);\n            };\n        }\n        return pressProps;\n    }, [\n        addGlobalListener,\n        isDisabled,\n        preventFocusOnPress,\n        removeAllGlobalListeners,\n        allowTextSelectionOnPress,\n        cancel,\n        cancelOnPointerExit,\n        triggerPressEnd,\n        triggerPressStart,\n        triggerPressUp\n    ]);\n    // Remove user-select: none in case component unmounts immediately after pressStart\n    // eslint-disable-next-line arrow-body-style\n    (0, $7mdmh$useEffect)(()=>{\n        return ()=>{\n            var _ref_current_target;\n            if (!allowTextSelectionOnPress) // eslint-disable-next-line react-hooks/exhaustive-deps\n            (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);\n        };\n    }, [\n        allowTextSelectionOnPress\n    ]);\n    return {\n        isPressed: isPressedProp || isPressed,\n        pressProps: (0, $7mdmh$mergeProps)(domProps, pressProps)\n    };\n}\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n    return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n    const { key: key, code: code } = event;\n    const element = currentTarget;\n    const role = element.getAttribute(\"role\");\n    // Accessibility for keyboards. Space and Enter only.\n    // \"Spacebar\" is for IE 11\n    return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof (0, $7mdmh$getOwnerWindow)(element).HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key\n    !((role === \"link\" || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== \"Enter\");\n}\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n    const { targetTouches: targetTouches } = event;\n    if (targetTouches.length > 0) return targetTouches[0];\n    return null;\n}\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n    const changedTouches = event.changedTouches;\n    for(let i = 0; i < changedTouches.length; i++){\n        const touch = changedTouches[i];\n        if (touch.identifier === pointerId) return touch;\n    }\n    return null;\n}\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n    return {\n        currentTarget: target,\n        shiftKey: e.shiftKey,\n        ctrlKey: e.ctrlKey,\n        metaKey: e.metaKey,\n        altKey: e.altKey\n    };\n}\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n    let offsetX = 0;\n    let offsetY = 0;\n    if (point.width !== undefined) offsetX = point.width / 2;\n    else if (point.radiusX !== undefined) offsetX = point.radiusX;\n    if (point.height !== undefined) offsetY = point.height / 2;\n    else if (point.radiusY !== undefined) offsetY = point.radiusY;\n    return {\n        top: point.clientY - offsetY,\n        right: point.clientX + offsetX,\n        bottom: point.clientY + offsetY,\n        left: point.clientX - offsetX\n    };\n}\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n    // check if they cannot overlap on x axis\n    if (a.left > b.right || b.left > a.right) return false;\n    // check if they cannot overlap on y axis\n    if (a.top > b.bottom || b.top > a.bottom) return false;\n    return true;\n}\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n    let rect = target.getBoundingClientRect();\n    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n    // We cannot prevent default if the target is a draggable element.\n    return !(target instanceof HTMLElement) || !target.hasAttribute(\"draggable\");\n}\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n    if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n    if (target instanceof HTMLButtonElement) return target.type !== \"submit\" && target.type !== \"reset\";\n    if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;\n    return true;\n}\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\n    \"checkbox\",\n    \"radio\",\n    \"range\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"button\",\n    \"submit\",\n    \"reset\"\n]);\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n    // Only space should toggle checkboxes and radios, not enter.\n    return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\n\n\nexport {$f6c31cce2adf654f$export$45712eceda6fad21 as usePress};\n//# sourceMappingURL=usePress.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}